{"version":3,"sources":["constants/Colors.ts","components/Themed.tsx","components/Optional.tsx","screens/MainScreen.tsx","App.tsx","hooks/useCachedResources.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","View","backgroundColor","Optional","useState","data","setData","styles","options","info_field","ScrollView","scrollEnabled","btn_text","btn_field","title","btnTitle","buttonStyle","bnt","titleStyle","onPress","fetch","then","response","ok","createTwoButtonAlert","catch","Alert","alert","console","log","cancelable","StyleSheet","create","flexDirection","width","height","marginVertical","alignSelf","borderRadius","flex","MainScreen","container","separator","scroll","alignItems","justifyContent","marginTop","fontSize","fontWeight","alignContent","App","React","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","Ionicons","font","require","warn","useCachedResources","module","exports"],"mappings":"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","file":"static/js/app.d4ebe1d9.chunk.js","sourcesContent":["const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as React from 'react';\nimport {Alert, ScrollView, StyleSheet} from 'react-native';\nimport { Button } from 'react-native-elements';\nimport { Text, View } from './Themed';\nimport {useState} from \"react\";\n\nexport default function Optional(props: any) {\n    const [data, setData] = useState('')\n\n    const onPress = () => {\n        fetch('http://localhost:8080/gps')\n            .then(response => {\n                if (!response.ok) {\n                    createTwoButtonAlert()\n                    return ''\n                }\n                return response.text()\n            })\n            .then(text => setData(text))\n            .catch(() => createTwoButtonAlert());\n    }\n\n    //onClickAction = () => {\n    //     fetch('https://run.mocky.io/v3/c99b753a-52e8-4903-a6c0-f51e11d2e6b4')\n    //       .then(resp => resp.json())\n    //       .then(json => this.setState({count: JSON.stringify( json)}));\n    //} Example  json-result for class\n\n    return (\n        <View style={styles.options}>\n            <View style={styles.info_field}>\n                <ScrollView scrollEnabled={true}>\n                <Text style={styles.btn_text}>{data}</Text>\n                </ScrollView>\n            </View>\n            <View style={styles.btn_field}>\n                <Button title={props.btnTitle} buttonStyle={styles.bnt} titleStyle={styles.btn_text}\n                    onPress={onPress}/>\n            </View>\n        </View>\n    );\n}\n\nconst createTwoButtonAlert = () =>\n    Alert.alert(\n        \"🙁 Failed to request data\",\n        \"Please try again later\",\n        [{ text: \"OK\", onPress: () => console.log(\"OK Pressed\") }],\n        { cancelable: false }\n    );\n\nconst styles = StyleSheet.create({\n    options: {\n        flexDirection: 'row',\n        width: '97%',\n        height: 150,\n        marginVertical: 5,\n        alignSelf: 'center',\n        borderRadius:5,\n\n    },\n    btn_field: {\n        alignSelf: \"center\",\n        flex:1,\n        backgroundColor: \"#fff\",\n\n    },\n    info_field: {\n        alignSelf: \"center\",\n        flex: 1,\n        backgroundColor: \"green\",\n\n    },\n    bnt: {\n        backgroundColor: \"green\",\n        alignSelf:\"center\",\n        width: \"90%\",\n    },\n    btn_text: {\n        color: \"white\",\n    },\n});\n","import * as React from 'react';\nimport {ScrollView, StyleSheet} from 'react-native';\n\nimport {Text, View} from '../components/Themed';\nimport Optional from '../components/Optional';\n\nexport default function MainScreen() {\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>Узнай что хочешь!</Text>\n            <View style={styles.separator} lightColor=\"#473\" darkColor=\"rgba(28,156,2,0.1)\"/>\n            <ScrollView style={styles.scroll}>\n                <Optional btnTitle=\"Button 1\"/>\n                <Optional btnTitle=\"Button 2\"/>\n                <Optional btnTitle=\"Button 3\"/>\n            </ScrollView>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: 30,\n        width: \"100%\",\n        flex: 1,\n        backgroundColor: \"#8bc34a\"\n    },\n    title: {\n        fontSize: 20,\n        marginVertical: 3,\n        fontWeight: 'bold',\n        alignSelf: \"center\",\n        color: \"#005b01\",\n    },\n    separator: {\n        height: 3,\n        width: \"80%\",\n        marginVertical: 2,\n        //backgroundColor: \"blue\"\n    },\n    scroll: {\n        alignContent: 'center',\n        width: '100%',\n        backgroundColor: \"#8bc34a\"\n    },\n});\n","import React from 'react';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport MainScreen from \"./screens/MainScreen\";\n\nexport default function App() {\n    const isLoadingComplete = useCachedResources();\n\n    if (!isLoadingComplete) {\n        return null;\n    } else {\n        return <MainScreen/>;\n    }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}