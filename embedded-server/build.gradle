plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
}

repositories {
    jcenter()
}

group 'itmo.embedded'
version '1.0-SNAPSHOT'


dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    testImplementation "io.ktor:ktor-client-gson:$ktor_version"
    testImplementation "io.ktor:ktor-client-apache:$ktor_version"
    implementation "io.ktor:ktor-gson:$ktor_version"

    implementation 'io.ktor:ktor-network:1.4.1'
    implementation 'io.ktor:ktor-server-core:1.4.1'

    testImplementation platform('org.junit:junit-bom:5.7.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
jar {
    def mainClass = 'ServerInstantiationKt'
    def dataSimulationClass = 'DataSimulationKt'

    if (project.hasProperty('simulateData')) {
        archiveName 'simulateData.jar'
    }
    manifest {
        attributes('Main-Class': project.hasProperty('simulateData') ? dataSimulationClass : mainClass)
    }
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

test {
    useJUnitPlatform()
}